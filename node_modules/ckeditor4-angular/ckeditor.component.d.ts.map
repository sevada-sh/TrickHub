{"version":3,"file":"ckeditor.component.d.ts","sources":["ckeditor.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nimport { NgZone, EventEmitter, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CKEditor4 } from './ckeditor';\nexport declare class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n    private elementRef;\n    private ngZone;\n    /**\n     * The configuration of the editor.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html\n     * to learn more.\n     */\n    config?: CKEditor4.Config;\n    /**\n     * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n     *\n     * Defaults to 'https://cdn.ckeditor.com/4.20.1/standard-all/ckeditor.js'\n     */\n    editorUrl: string;\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is `textarea`.\n     */\n    tagName: string;\n    /**\n     * The type of the editor interface.\n     *\n     * By default editor interface will be initialized as `classic` editor.\n     * You can also choose to create an editor with `inline` interface type instead.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n     * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n     * to learn more.\n     */\n    type: CKEditor4.EditorType;\n    /**\n     * Keeps track of the editor's data.\n     *\n     * It's also decorated as an input which is useful when not using the ngModel.\n     *\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n    set data(data: string);\n    get data(): string;\n    /**\n     * When set to `true`, the editor becomes read-only.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n     * to learn more.\n     */\n    set readOnly(isReadOnly: boolean);\n    get readOnly(): boolean;\n    /**\n     * Fired when the CKEDITOR https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR.html namespace\n     * is loaded. It only triggers once, no matter how many CKEditor 4 components are initialised.\n     * Can be used for convenient changes in the namespace, e.g. for adding external plugins.\n     */\n    namespaceLoaded: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n     * event.\n     */\n    ready: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the editor data is loaded, e.g. after calling setData()\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n     * editor's method. It corresponds with the `editor#dataReady`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n     */\n    dataReady: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n     * event. For performance reasons this event may be called even when data didn't really changed.\n     * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n     * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n     */\n    change: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n     * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n     *\n     * See more: https://angular.io/guide/template-syntax#two-way-binding---\n     */\n    dataChange: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the native dragStart event occurs. It corresponds with the `editor#dragstart`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n     * event.\n     */\n    dragStart: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the native dragEnd event occurs. It corresponds with the `editor#dragend`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n     * event.\n     */\n    dragEnd: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n     * event.\n     */\n    drop: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n     * event.\n     */\n    fileUploadResponse: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n     * event.\n     */\n    fileUploadRequest: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the editing area of the editor is focused. It corresponds with the `editor#focus`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n     * event.\n     */\n    focus: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires after the user initiated a paste action, but before the data is inserted.\n     * It corresponds with the `editor#paste`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n     * event.\n     */\n    paste: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n     * event.\n     */\n    afterPaste: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n     * event.\n     */\n    blur: EventEmitter<CKEditor4.EventInfo>;\n    /**\n     * A callback executed when the content of the editor changes. Part of the\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n     *\n     * Note: Unset unless the component uses the `ngModel`.\n     */\n    onChange?: (data: string) => void;\n    /**\n     * A callback executed when the editor has been blurred. Part of the\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n     *\n     * Note: Unset unless the component uses the `ngModel`.\n     */\n    onTouched?: () => void;\n    /**\n     * The instance of the editor created by this component.\n     */\n    instance: any;\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n    private _readOnly;\n    private _data;\n    private _destroyed;\n    constructor(elementRef: ElementRef, ngZone: NgZone);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: string): void;\n    registerOnChange(callback: (data: string) => void): void;\n    registerOnTouched(callback: () => void): void;\n    private createEditor;\n    private subscribe;\n    private propagateChange;\n}\n"]}